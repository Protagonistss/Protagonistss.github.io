<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mongo备份操作</title>
    <url>/2019/06/22/db/mongo/</url>
    <content><![CDATA[<h4 id="Mongo的mongodump、mongorestore"><a href="#Mongo的mongodump、mongorestore" class="headerlink" title="Mongo的mongodump、mongorestore"></a>Mongo的mongodump、mongorestore</h4><h6 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongodump -d individtax -o /users/</span><br></pre></td></tr></table></figure>
<h6 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongorestore -d individtax --dir /users/individtax/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mongo</category>
      </categories>
      <tags>
        <tag>backup</tag>
      </tags>
  </entry>
  <entry>
    <title>Css样式选中</title>
    <url>/2019/05/16/css/css-%E6%A0%B7%E5%BC%8F%E9%80%89%E4%B8%AD/</url>
    <content><![CDATA[<h4 id="CSS选中元素"><a href="#CSS选中元素" class="headerlink" title="CSS选中元素"></a>CSS选中元素</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">	&lt;p&gt;&lt;/p&gt;</span><br><span class="line">	&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="selector-tag">style</span>&#123;</span><br><span class="line">  // 选中第一个p标签</span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 选中除了第一个p标签以外的标签</span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-tag">p</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:first-child)</span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>git的基本操作</title>
    <url>/2019/04/29/git/git-branch/</url>
    <content><![CDATA[<h1 id="一、add"><a href="#一、add" class="headerlink" title="一、add"></a>一、add</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加文件跟踪到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 添加已经被git管理的文件到暂存区</span></span><br><span class="line">git add -u</span><br></pre></td></tr></table></figure>
<h1 id="二、branch"><a href="#二、branch" class="headerlink" title="二、branch"></a>二、branch</h1><ul>
<li>git branch branch [starting-commit]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch dev new-create d25bdb13539c9d584a434cc47da864fe49afd826</span><br><span class="line"></span><br><span class="line">dev:是当前所在的分之</span><br><span class="line">new-create:是要创建的新分支</span><br><span class="line">d25bdb13539c9d584a434cc47da864fe49afd826: 指定从当前分之的该次提交启动一个新分支。</span><br></pre></td></tr></table></figure>
<h1 id="三、commit"><a href="#三、commit" class="headerlink" title="三、commit"></a>三、commit</h1><ul>
<li>在Git中，提交(commit)是用来记录版本库的变更。</li>
<li>HEAD<ul>
<li>HEAD 始终指向当前分之的最近提交。当切换分之，HEAD会更新为之乡新分支的最近提交。</li>
</ul>
</li>
<li>ORIG_HEAD <ul>
<li>某些操作，比如合并和reset，会把调整为新值之前的先前版本的HEAD记录到ORIG_HEAD中。可以使用ORIG_HEAD来恢复或回滚到之前的状态或者做一个比较。</li>
</ul>
</li>
<li>git bisect<ul>
<li>在使用git bisect 的时候，你首先需要确定”好”提交和”坏”提交，</li>
</ul>
</li>
<li>git blame <ul>
<li>可以告知我们一个文件中的每一行最后是谁修改的和哪次提交做出了变更，即当前文件的状态。</li>
<li>参数-L，查看文件的多少行</li>
</ul>
</li>
<li>git diff</li>
<li>git show dev:文件名<ul>
<li>显示该文件在dev分之中的状态</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Div横向排列和出现横向滚动条</title>
    <url>/2019/04/30/css/div-%E6%A8%AA%E5%90%91%E6%8E%92%E5%88%97%E5%92%8C%E5%87%BA%E7%8E%B0%E6%A8%AA%E5%90%91%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
    <content><![CDATA[<h5 id="出现横向滚动条"><a href="#出现横向滚动条" class="headerlink" title="出现横向滚动条"></a>出现横向滚动条</h5><p>核心思路是使用<code>white-space</code> 这个属性防止父容器内容换行，例子如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">ul&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  overflow-x: scroll;</span><br><span class="line">  overflow-y: hidden;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">&#125;</span><br><span class="line">ul li&#123;</span><br><span class="line"><span class="css">  <span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span>;</span></span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat</title>
    <url>/2019/05/01/java/tomcat/</url>
    <content><![CDATA[<h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><ul>
<li>tomcat 下载<ul>
<li><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">tomcat 下载地址</a></li>
</ul>
</li>
<li>mac 下载tar.gz格式<ul>
<li>解压 `tar -zxvf apache-tomcat-9.0.19.tar.gz </li>
<li>将解压后的文件夹重命名为Tomcat( 之所以重名,只是习惯性命名 )放到/Library下</li>
<li>进入到Tomcat 文件夹下的bin目录</li>
<li>设置bin目录下的所有.sh文件的读写执行权限 <code>sudo chmod 755 *.sh</code></li>
<li>启动tomcat 服务<code>sudo sh startup.sh</code></li>
<li>关闭tomcat服务<code>sudo sh shutdown.sh</code></li>
</ul>
</li>
<li>注意:tomcat 的配置信息都在server.xml文件里配置，如果想自定义配置,可以去xml文件配置</li>
</ul>
<h4 id="Eclipse-集成Tomcat"><a href="#Eclipse-集成Tomcat" class="headerlink" title="Eclipse 集成Tomcat"></a>Eclipse 集成Tomcat</h4><ul>
<li>Window-&gt;show view -&gt; server</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>计算表达式</title>
    <url>/2019/12/28/javascript/cal-exp/</url>
    <content><![CDATA[<h3 id="计算表达式拆解"><a href="#计算表达式拆解" class="headerlink" title="计算表达式拆解"></a>计算表达式拆解</h3><blockquote>
<p>本例子使用数组实现栈,在栈的基础上 实现计算表达式</p>
</blockquote>
<h4 id="一、定义栈"><a href="#一、定义栈" class="headerlink" title="一、定义栈"></a>一、定义栈</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = []</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    items.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items[items.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    items = []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="二、用上述栈先来实现一个判断左右括号闭合的方法"><a href="#二、用上述栈先来实现一个判断左右括号闭合的方法" class="headerlink" title="二、用上述栈先来实现一个判断左右括号闭合的方法"></a>二、用上述栈先来实现一个判断左右括号闭合的方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"><span class="comment">// validator</span></span><br><span class="line"><span class="comment">// 只入栈括号,</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLegal</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;param.length; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> item = param[i]</span><br><span class="line">    <span class="keyword">if</span>(item === <span class="string">'('</span>)&#123;</span><br><span class="line">      stack.push(item)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item === <span class="string">')'</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        stack.pop()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.isEmpty()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isLegal(<span class="string">"((abc))"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="三、实现一个计算后缀表达式"><a href="#三、实现一个计算后缀表达式" class="headerlink" title="三、实现一个计算后缀表达式"></a>三、实现一个计算后缀表达式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">expressionList</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data_stack = <span class="keyword">new</span> Stack()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; expressionList.length; i++)&#123;</span><br><span class="line">  	<span class="keyword">var</span> item = expressionList[i]</span><br><span class="line">    <span class="keyword">if</span>([<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'*'</span>, <span class="string">'/'</span>].indexOf(item) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> pre = data_stack.pop()</span><br><span class="line">      <span class="keyword">var</span> next = data_stack.pop()</span><br><span class="line">      <span class="keyword">var</span> result = next + item + pre</span><br><span class="line">      result = <span class="built_in">parseInt</span>(<span class="built_in">eval</span>(result))</span><br><span class="line">      stack.push(result)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      stack.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.pop()</span><br><span class="line">&#125;</span><br><span class="line">calculate([<span class="string">'4'</span>,<span class="string">'13'</span>, <span class="string">'5'</span>, <span class="string">'/'</span>, <span class="string">'+'</span>])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>arithmetic</tag>
      </tags>
  </entry>
  <entry>
    <title>eslint</title>
    <url>/2022/04/10/javascript/eslint/</url>
    <content><![CDATA[<h1 id="一、初始化eslint"><a href="#一、初始化eslint" class="headerlink" title="一、初始化eslint"></a>一、初始化eslint</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm add eslint -D</span><br><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure>
<blockquote>
<p>选择自己的配置</p>
</blockquote>
<h1 id="二、初始化prettier"><a href="#二、初始化prettier" class="headerlink" title="二、初始化prettier"></a>二、初始化prettier</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm add prettier -D</span><br></pre></td></tr></table></figure>
<blockquote>
<p>配置prettier文件，创建.prettierrc.json</p>
</blockquote>
<h1 id="三、解决prettier和eslint冲突"><a href="#三、解决prettier和eslint冲突" class="headerlink" title="三、解决prettier和eslint冲突"></a>三、解决prettier和eslint冲突</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm add eslint-config-prettier eslint-plugin-prettier -D</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>eslint</category>
      </categories>
      <tags>
        <tag>eslant config</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker总结</title>
    <url>/2019/04/28/docker/docker/</url>
    <content><![CDATA[<h3 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h3><ul>
<li>获取镜像<ul>
<li>docker pull 镜像名</li>
</ul>
</li>
<li>使用tag命令添加镜像标签<ul>
<li>docker tag ubuntu:latest myubuntu:latest</li>
<li>注意,这里的myubuntu:latest 和ubuntu:latest 镜像的ID其实是完全一致的,它们实际上同一个镜像文件，知识别名不同而已。</li>
</ul>
</li>
<li>进入容器中<ul>
<li>docker attach 使用该命令 进入容器时候,当多个窗口同时attach到同一个容器中的时候,所有的窗口都会同步显示,所以一个窗口进行阻塞操作的时候,另外的窗口中的容器也会阻塞,而且值得一提的是,当使用exit退出容器的时候,容器会关掉。前提是容器没有使用-d参数后台运行。</li>
<li>docker exec -it 容器名 /bin/bash 这种方式与attach相反。</li>
</ul>
</li>
<li>docker ps -qa 查看所有容器的ID</li>
</ul>
<a id="more"></a>
<h5 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h5><h6 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h6><ul>
<li>docker export -o 文件名 容器ID<ul>
<li><code>docker export -o test.tar ceba23bdb8db</code></li>
</ul>
</li>
<li>docker export 容器ID  &gt; 文件名<ul>
<li><code>docker export ceba23bdb8db &gt; test.tar</code></li>
</ul>
</li>
</ul>
<h6 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h6><ul>
<li><code>docker import test.tar  test/demo</code></li>
</ul>
<ul>
<li>查看容器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker top 容器名 or ID</span><br><span class="line">docker container inpect 容器名 or ID</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2019/12/28/javascript/triangle/</url>
    <content><![CDATA[<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote>
<p>利用数组定义队列,在队列的基础上实现一些功能</p>
</blockquote>
<h4 id="一、定义队列"><a href="#一、定义队列" class="headerlink" title="一、定义队列"></a>一、定义队列</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = []</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    items.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.shift()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.head = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.tail = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items[items.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    items = []</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.Empty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="二、实现斐波那契"><a href="#二、实现斐波那契" class="headerlink" title="二、实现斐波那契"></a>二、实现斐波那契</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用队列实现斐波那契,此处默认n &gt; 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">  queue.enqueue(<span class="number">1</span>)</span><br><span class="line">  queue.enqueue(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(index &lt; n - <span class="number">2</span> )&#123;</span><br><span class="line">     <span class="keyword">var</span> old_head_data = queue.dequeue()</span><br><span class="line">     <span class="keyword">var</span> new_head_data = queue.head()</span><br><span class="line">     <span class="keyword">var</span> next_data = old_head_data + new_head_data</span><br><span class="line">     queue.enqueue(next_data)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  queue.dequeue()</span><br><span class="line">  <span class="keyword">return</span> queue.head()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>队列中始终只有两个数, 第二个数便是所求的数</p>
</blockquote>
<h4 id="三、循环删除"><a href="#三、循环删除" class="headerlink" title="三、循环删除"></a>三、循环删除</h4><blockquote>
<p>有一个数组a[100] 存放0-99,要求每隔两个数删掉一个数,到末尾时循环至开头继续进行,求最后一个被删除的数.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteCircle</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    queue.enqueue(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(queue.size() != <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> item = queue.dequeue()</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(index % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">      queue.enqueue(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">  arr.push(i)</span><br><span class="line">&#125;</span><br><span class="line">deleteCircle(arr)</span><br></pre></td></tr></table></figure>
<h4 id="四、使用两个队列实现一个栈"><a href="#四、使用两个队列实现一个栈" class="headerlink" title="四、使用两个队列实现一个栈"></a>四、使用两个队列实现一个栈</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> init_queue_first  = <span class="keyword">new</span> Queue()</span><br><span class="line">  <span class="keyword">var</span> init_queue_second = <span class="keyword">new</span> Queue()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> data_queue = <span class="literal">null</span></span><br><span class="line"> 	<span class="keyword">var</span> empty_queue = <span class="literal">null</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">validateEmptyQueue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(init_queue_first.isEmpty()&amp;&amp; init_queue_second.isEmpty())&#123;</span><br><span class="line">    	data_queue = init_queue_first</span><br><span class="line">      empty_queue = init_queue_second</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(init_queue_first.isEmpty())&#123;</span><br><span class="line">      data_queue = init_queue_second</span><br><span class="line">      empty_queue = init_queue_first</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      data_queue = init_queue_first</span><br><span class="line">      empty_queue = init_queue_second</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line">  <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    validateEmptyQueue()</span><br><span class="line">    data_queue.enqueue(item)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    validateEmptyQueue()</span><br><span class="line">    <span class="keyword">return</span> data_queue.tail()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    validateEmptyQueue()</span><br><span class="line">    <span class="keyword">while</span>(data_queue.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">      empty_queue.enqueue(data_queue.dequeue())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data_queue.dequeue()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line">  stack.push(<span class="number">1</span>)</span><br><span class="line">  stack.push(<span class="number">2</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(stack.pop())</span><br><span class="line">  <span class="built_in">console</span>.log(stack.pop())</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="五、使用队列实现杨辉三角"><a href="#五、使用队列实现杨辉三角" class="headerlink" title="五、使用队列实现杨辉三角"></a>五、使用队列实现杨辉三角</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">triangle</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">  queue.enqueue(<span class="number">1</span>)</span><br><span class="line"> 	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> line = <span class="string">''</span></span><br><span class="line">    <span class="keyword">var</span> pre = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">      <span class="keyword">var</span> item = queue.dequeue()</span><br><span class="line">      line += item + <span class="string">" "</span></span><br><span class="line">      <span class="comment">//此时开始计算下一行的数据</span></span><br><span class="line">      pre = item</span><br><span class="line">      <span class="keyword">var</span> value = item + pre</span><br><span class="line">      queue.enqueue(value)</span><br><span class="line">    &#125;</span><br><span class="line">    queue.enqueue(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(line)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">triangle(<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>外层for循环是计算行,内层for循环是计算行的内容</p>
</blockquote>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>arithmetic</tag>
      </tags>
  </entry>
  <entry>
    <title>travis-ci</title>
    <url>/2022/03/04/deploy/travis-ci/</url>
    <content><![CDATA[<h1 id="Travis"><a href="#Travis" class="headerlink" title="Travis"></a>Travis</h1>]]></content>
      <categories>
        <category>deploy</category>
      </categories>
      <tags>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>环境搭建</title>
    <url>/2020/01/17/linux/platform-install/</url>
    <content><![CDATA[<h3 id="一、UBUNTU18-04-安装"><a href="#一、UBUNTU18-04-安装" class="headerlink" title="一、UBUNTU18.04 安装"></a>一、UBUNTU18.04 安装</h3><h4 id="1、服务器创建用户"><a href="#1、服务器创建用户" class="headerlink" title="1、服务器创建用户"></a>1、服务器创建用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 在 /home 目录下创建 username </span><br><span class="line">sudo useradd -m -s /bin/bash username</span><br><span class="line">// 设置密码</span><br><span class="line">sudo passwd username</span><br><span class="line">// 给username 赋予管理员权限</span><br><span class="line">sudo vim /etc/sudoers</span><br><span class="line">root ALL=(ALL:ALL)ALL</span><br><span class="line">protagonisths ALL=(ALL:ALL)ALL</span><br></pre></td></tr></table></figure>
<h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://github.com/nodesource/distributions#debinstall" target="_blank" rel="noopener">https://github.com/nodesource/distributions#debinstall</a></p>
</blockquote>
<h4 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install yarn</span><br></pre></td></tr></table></figure>
<h4 id="安装Pm2"><a href="#安装Pm2" class="headerlink" title="安装Pm2"></a>安装Pm2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4.2.1</span></span><br><span class="line">npm i -g pm2</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="安装mongo"><a href="#安装mongo" class="headerlink" title="安装mongo"></a>安装mongo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line">sudo apt-get install -y mongodb</span><br><span class="line"><span class="comment"># stop</span></span><br><span class="line">sudo service mongodb stop</span><br><span class="line"><span class="comment"># setup</span></span><br><span class="line">sudo service mongodb start</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>Bind、Apply、Call的区别</title>
    <url>/2020/01/08/javascript/bind/</url>
    <content><![CDATA[<p>相同点就是这三个方法都可以改变函数的this指向，不同点是call，apply是修改函数作用域，修改this指向，并且立即执行。bind是返回一个新的函数,并不会立即执行，若想立即执行需要在后面加上()调用，当然关于传入的参数也有一定的差异，call和bind可以接受多个单个的参数，apply 接受的参数形式是数组。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>website</title>
    <url>/2019/05/19/linux/website/</url>
    <content><![CDATA[<h5 id="Create-command"><a href="#Create-command" class="headerlink" title="Create command"></a>Create command</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>website</category>
      </categories>
      <tags>
        <tag>helper</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2019/12/31/javascript/link-list/</url>
    <content><![CDATA[<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="一、链表的概念"><a href="#一、链表的概念" class="headerlink" title="一、链表的概念"></a>一、链表的概念</h4><p>链表是物理存储单元上非连续的，非顺序的存储结构，由一系列节点组成。链表分为有头链表和无头链表。</p>
<h5 id="1、节点"><a href="#1、节点" class="headerlink" title="1、节点"></a>1、节点</h5><p>节点包含包含两个部分，一部分是存储数据元素的数据域，一部分是存储指向下一个节点的指针域，这两块构成一个节点，节点如何去使用？简单示意如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = data</span><br><span class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> node = <span class="keyword">new</span> Node(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> node1 = <span class="keyword">new</span> Node(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">var</span> node2 = <span class="keyword">new</span> Node(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">console</span>.log(node)</span><br><span class="line"><span class="built_in">console</span>.log(node.next.data)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="2、链表的方法"><a href="#2、链表的方法" class="headerlink" title="2、链表的方法"></a>2、链表的方法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> length = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> head = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">var</span> tail = <span class="literal">null</span></span><br><span class="line">  <span class="comment">// append 方法</span></span><br><span class="line">  <span class="keyword">this</span>.append = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> new_node = <span class="keyword">new</span> Node(data)</span><br><span class="line">    <span class="keyword">if</span>(head === <span class="literal">null</span>)&#123;</span><br><span class="line">      head = new_node</span><br><span class="line">      tail = new_node</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      tail.next = new_node</span><br><span class="line">      tail = new_node</span><br><span class="line">    &#125;</span><br><span class="line">    length += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// insert 方法</span></span><br><span class="line">  <span class="keyword">this</span>.insert = functoin(index, data)&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; length)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index === length)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.append(index, data)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> new_node = <span class="keyword">new</span> Node(data)</span><br><span class="line">      <span class="keyword">if</span>(index === <span class="number">0</span>)&#123;</span><br><span class="line">        new_node.next = head</span><br><span class="line">        head = new_node</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> insert_index = <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> curr_node = head</span><br><span class="line">        <span class="keyword">while</span>(insert_index &lt; index)&#123;</span><br><span class="line">          insert_index += <span class="number">1</span></span><br><span class="line">          curr_node = curr_node.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> next_node = curr_node.next</span><br><span class="line">        curr_node.next = new_node</span><br><span class="line">        new_node.next = next_node</span><br><span class="line">      &#125;</span><br><span class="line">      length += <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> current_node = head</span><br><span class="line">    <span class="keyword">while</span>(head === <span class="literal">true</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(current_node.data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>arithmetic</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx依赖</title>
    <url>/2019/10/11/nginx/nginx%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<h3 id="编译安装nginx需要安装依赖"><a href="#编译安装nginx需要安装依赖" class="headerlink" title="编译安装nginx需要安装依赖"></a>编译安装nginx需要安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++</span><br><span class="line">yum -y install zlib zlib-devel openssl openssl-devel pcre-devel</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title>查看使用的端口</title>
    <url>/2019/06/02/linux/%E6%9F%A5%E7%9C%8B%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<h5 id="Centos7"><a href="#Centos7" class="headerlink" title="Centos7"></a>Centos7</h5><p>查看服务器端口号目前的使用情况</p>
<p>netstat -luntp</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>helper</tag>
      </tags>
  </entry>
  <entry>
    <title>SCP使用示例</title>
    <url>/2019/06/21/linux/scp/</url>
    <content><![CDATA[<h4 id="SCP-复制远程服务器上的目录"><a href="#SCP-复制远程服务器上的目录" class="headerlink" title="SCP 复制远程服务器上的目录"></a>SCP 复制远程服务器上的目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -p 22 -r root@ip:/home/example/ /temp/</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>helper</tag>
      </tags>
  </entry>
  <entry>
    <title>Rewrite总结</title>
    <url>/2019/06/02/nginx/rewrite/</url>
    <content><![CDATA[<h4 id="一、Rewrite"><a href="#一、Rewrite" class="headerlink" title="一、Rewrite"></a>一、Rewrite</h4><p>​    实现url<span style="color:red">重写</span>以及<span style="color:red">重定向</span></p>
<h4 id="二、场景"><a href="#二、场景" class="headerlink" title="二、场景"></a>二、场景</h4><p>​    url访问跳转,支持开发设计(页面跳转,兼容性支持,展示效果等)</p>
<p>​    SEO优化</p>
<p>​    运维人员维护</p>
<p>​    后台维护、流量转发</p>
<p>​    安全-&gt;伪静态</p>
<h4 id="三、配置语法"><a href="#三、配置语法" class="headerlink" title="三、配置语法"></a>三、配置语法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Systanx: rewrite regx replacement[flag]</span><br><span class="line">​	Default: --</span><br><span class="line">​	Context:server,location,<span class="keyword">if</span></span><br></pre></td></tr></table></figure>
<p>​    <a id="more"></a></p>
<h4 id="四、正则"><a href="#四、正则" class="headerlink" title="四、正则"></a>四、正则</h4><p>​    pcre 正则测试</p>
<h4 id="五、Flag"><a href="#五、Flag" class="headerlink" title="五、Flag"></a>五、Flag</h4><p>​    last : 停止rewrite 检测</p>
<p>​    Break: 停止rewrite 检测</p>
<p>​    redirect : 返回302临时重定向,地址栏会显示跳转后的地址</p>
<p>​    permanent : 返回301永久重定向，地址栏会显示跳转后的地址 (nginx 停掉也会重定向)</p>
<h4 id="六、Rewrite-规则优先级"><a href="#六、Rewrite-规则优先级" class="headerlink" title="六、Rewrite 规则优先级"></a>六、Rewrite 规则优先级</h4><p>​    执行server块的rewrite指令</p>
<p>​    执行location匹配</p>
<p>​    执行选定的location中的rewrite</p>
<h4 id="七、示例"><a href="#七、示例" class="headerlink" title="七、示例"></a>七、示例</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen  6060;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/host.access.log  main;</span><br><span class="line">    root /opt/app/code;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^/course-(\d+)-(\d+)-(\d+)\.html$ /course/<span class="variable">$1</span>/<span class="variable">$2</span>/course_<span class="variable">$3</span>.html <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* Chrome) &#123;</span><br><span class="line">            rewrite ^/nginx http://www.baidu.com redirect;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!-f <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">            rewrite ^/(.*)$ http://www.baidu.com redirect;</span><br><span class="line">        &#125;</span><br><span class="line">        index  index.html  index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^/<span class="built_in">break</span> &#123;</span><br><span class="line">        rewrite ^/<span class="built_in">break</span> /<span class="built_in">test</span>/ <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^/last &#123;</span><br><span class="line">        <span class="comment">#rewrite ^/last /test/ last;</span></span><br><span class="line">        rewrite ^/last /<span class="built_in">test</span>/ redirect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^/protagonist &#123;</span><br><span class="line">    	<span class="comment">#rewrite ^/protagonist  http://39.97.187.133:80 permanent;</span></span><br><span class="line">			rewrite ^/protagonist  http://39.97.187.133:80 redirect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /<span class="built_in">test</span>/ &#123;</span><br><span class="line">			default_type  application/json;</span><br><span class="line">			<span class="built_in">return</span> 200 <span class="string">'&#123;"status":"success"&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>helper</tag>
      </tags>
  </entry>
  <entry>
    <title>PyMysql使用</title>
    <url>/2022/03/09/python/pymysql/</url>
    <content><![CDATA[<h1 id="一、使用pymysql"><a href="#一、使用pymysql" class="headerlink" title="一、使用pymysql"></a>一、使用pymysql</h1><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p><code>pip install pymysql</code></p>
<h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span>:</span></span><br><span class="line">	_instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            cls._instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetMysqlIns</span><span class="params">(Single)</span>:</span></span><br><span class="line">    db = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.db = pymysql.connect(host=<span class="string">'xxx'</span>, user=<span class="string">'xxx'</span>,</span><br><span class="line">                                  passwd=<span class="string">'xxx'</span>, db=<span class="string">'xxx'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">		db_ins = GetMysqlIns()</span><br><span class="line">		cursor = db_ins.db.cursor()</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="二、新增"><a href="#二、新增" class="headerlink" title="二、新增"></a>二、新增</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create_data = [(<span class="string">'xxx'</span>, <span class="number">18</span>)]</span><br><span class="line">create_sql = <span class="string">"insert into table (name, age) values (%s, %s)"</span></span><br><span class="line">cursor.executemany(create_sql, create_data)</span><br></pre></td></tr></table></figure>
<h1 id="三、删除"><a href="#三、删除" class="headerlink" title="三、删除"></a>三、删除</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delete_sql = <span class="string">"delete from table where name='&#123;&#125;'"</span></span><br><span class="line">delete_data = [(<span class="string">'name'</span>)]</span><br><span class="line">cursor.executemany(delete_sql, delete_data)</span><br></pre></td></tr></table></figure>
<h1 id="四、修改"><a href="#四、修改" class="headerlink" title="四、修改"></a>四、修改</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">update_sql = <span class="string">"update table set name=(%s) where age='18' and gender='male'"</span></span><br><span class="line">update_data = [(<span class="string">'xxx'</span>)]</span><br><span class="line">cursor.executemany(update_sql, update_data)</span><br></pre></td></tr></table></figure>
<h1 id="五、查询"><a href="#五、查询" class="headerlink" title="五、查询"></a>五、查询</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">query_sql = <span class="string">"select * from table where name='name'"</span></span><br><span class="line">cursor.execute(query_sql)</span><br></pre></td></tr></table></figure>
<h1 id="六、操作失败回滚"><a href="#六、操作失败回滚" class="headerlink" title="六、操作失败回滚"></a>六、操作失败回滚</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">		print(<span class="string">"操作db"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		db_ins.db.rollback()</span><br></pre></td></tr></table></figure>
<h1 id="七、关闭链接"><a href="#七、关闭链接" class="headerlink" title="七、关闭链接"></a>七、关闭链接</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor.close()</span><br><span class="line">db_ins.db.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title>node安装</title>
    <url>/2019/05/22/node/node%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h5 id="Node-Install"><a href="#Node-Install" class="headerlink" title="Node Install"></a>Node Install</h5><ul>
<li><p>Centos</p>
<ul>
<li><p>cd /usr/local</p>
</li>
<li><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github-production-release-asset-2e65be.s3.amazonaws.com/49970642/4ea79e00-6a70-11e9-8a21-46a123284fc5?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20190522%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20190522T052650Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=a92bd6d054a303</span><br></pre></td></tr></table></figure>
</li>
<li><p>此时下载的是二进制的包,不是采用源码安装,所以解压后没有configure文件</p>
</li>
<li><p>解压下载后的压缩包</p>
</li>
<li><p><code>tar -xvf node-v10.15.3-linux-x64</code></p>
</li>
<li><p>配置环境变量</p>
<ul>
<li>编辑.bash_profile<ul>
<li><code>export PATH=$PATH:/usr/local/node-v10.15.3-linux-x64/bin</code></li>
<li><code>source .bash_profile</code></li>
</ul>
</li>
</ul>
</li>
<li><p>配置软连接</p>
<ul>
<li><code>ln -s /usr/local/node-v10.15.3-linux-x64/bin/node /usr/local/bin</code></li>
<li><code>ln -s /usr/local/node-v10.15.3-linux-x64/bin/npm /usr/local/bin</code></li>
<li><code>ln -s /usr/local/node-v10.15.3-linux-x64/bin/npx /usr/local/bin</code></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm</title>
    <url>/2020/02/14/node/nvm/</url>
    <content><![CDATA[<h3 id="NVM-安装"><a href="#NVM-安装" class="headerlink" title="NVM 安装"></a>NVM 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> .bash_profile</span></span><br><span class="line">export NVM_DIR="$HOME/.nvm"</span><br><span class="line">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本地所有node版本</span></span><br><span class="line">nvm list</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装node</span></span><br><span class="line">nvm install v8.12.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换node版本</span></span><br><span class="line">nvm use 8.12.0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>nvm</category>
      </categories>
      <tags>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbitmq安装和使用</title>
    <url>/2021/01/16/python/setup/</url>
    <content><![CDATA[<h4 id="一、docker方式安装"><a href="#一、docker方式安装" class="headerlink" title="一、docker方式安装"></a>一、docker方式安装</h4><p>1、获取镜像，可以获取最新的，当然也可以选择dockerhub上star最多的，比如rabbitmq:3.8-management</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull rabbitmq</span><br></pre></td></tr></table></figure>
<p>2、搭建容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name rabbitmq -d -p 15672:15672 -p 5672:5672 [imageId]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-p 制定容器内部端口号与宿主机之间的映射，rabbitmq默认使用15672作为web端访问端口，5672为其数据通信端口。</p>
</blockquote>
<p>3、创建账户</p>
<blockquote>
<p>默认创建为guest用户，密码也是guest。但是默认创建的用户只能 通过本地网络访问，远程网络访问受限，所以我们需要创建一个帐号。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it containerId /bin/bash</span><br><span class="line"><span class="comment"># add user</span></span><br><span class="line">rabbitmqctl add_user root rootroot</span><br><span class="line"><span class="comment"># 给root账户赋所有权限</span></span><br><span class="line">rabbitmqctl set_permissions -p / root <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></span><br><span class="line"><span class="comment"># 给admin账户赋予administrator</span></span><br><span class="line">rabbitmqctl set_user_tags root administrator</span><br><span class="line"><span class="comment"># 查看创建的用户</span></span><br><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="二、使用python-pika测试rabbitmq"><a href="#二、使用python-pika测试rabbitmq" class="headerlink" title="二、使用python pika测试rabbitmq"></a>二、使用python pika测试rabbitmq</h4><p>1、创建producer.py，执行python producer.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># author: huangshan</span></span><br><span class="line"><span class="comment"># datetime: 2021-01-17 11:28</span></span><br><span class="line"><span class="comment"># software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">auth = pika.PlainCredentials(<span class="string">'root'</span>, <span class="string">'rootroot'</span>)</span><br><span class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">'192.168.50.107'</span>, <span class="number">5672</span>, <span class="string">'/'</span>, auth))</span><br><span class="line">channel = connection.channel()</span><br><span class="line">channel.queue_declare(queue=<span class="string">'TESTCASE1'</span>)</span><br><span class="line">channel.basic_publish(exchange=<span class="string">''</span>,routing_key=<span class="string">'TESTCASE1'</span>, body=<span class="string">'Hello World'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Sent 'Hello World'"</span>)</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure>
<p>2、创建consumer.py，执行python consumer.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># author: huangshan</span></span><br><span class="line"><span class="comment"># datetime: 2021-01-17 02:08</span></span><br><span class="line"><span class="comment"># software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"></span><br><span class="line">auth = pika.PlainCredentials(<span class="string">'root'</span>, <span class="string">'rootroot'</span>)</span><br><span class="line">connection = pika.BlockingConnection(</span><br><span class="line">    pika.ConnectionParameters(host=<span class="string">'192.168.50.107'</span>, port=<span class="number">5672</span>, virtual_host=<span class="string">'/'</span>, credentials=auth))</span><br><span class="line">channel = connection.channel()</span><br><span class="line">channel.queue_declare(queue=<span class="string">'TESTCASE1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></span><br><span class="line">    print(<span class="string">"Received %r"</span> % body)</span><br><span class="line"></span><br><span class="line">channel.basic_consume(on_message_callback=callback, queue=<span class="string">'TESTCASE1'</span>, auto_ack=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">'Waitting for message To exit press CTRL+ C'</span>)</span><br><span class="line">channel.start_consuming()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>rabbit</category>
      </categories>
      <tags>
        <tag>rabbit</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn的安装</title>
    <url>/2019/05/22/node/Yarn%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h5 id="INSTALL-YARN"><a href="#INSTALL-YARN" class="headerlink" title="INSTALL YARN"></a>INSTALL YARN</h5><ul>
<li><p>添加yum源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install yarn -y</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>yarn</category>
      </categories>
      <tags>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust安装</title>
    <url>/2022/03/09/rust/rust-start/</url>
    <content><![CDATA[<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><h2 id="Linux、Macos"><a href="#Linux、Macos" class="headerlink" title="Linux、Macos"></a>Linux、Macos</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --proto <span class="string">'=https'</span> --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>
<h1 id="二、查看版本"><a href="#二、查看版本" class="headerlink" title="二、查看版本"></a>二、查看版本</h1><p><code>rustc -v</code></p>
<p><code>cargo -v</code></p>
<h1 id="三、卸载"><a href="#三、卸载" class="headerlink" title="三、卸载"></a>三、卸载</h1><p><code>rustup self uninstall</code></p>
<h1 id="四、更新"><a href="#四、更新" class="headerlink" title="四、更新"></a>四、更新</h1><p><code>rustup update</code></p>
<h1 id="五、vscode插件"><a href="#五、vscode插件" class="headerlink" title="五、vscode插件"></a>五、vscode插件</h1><ul>
<li>Better TOML</li>
<li>Error Lens 展示错误信息</li>
<li>CodeLLDB, Debugger</li>
</ul>
]]></content>
      <categories>
        <category>rust</category>
      </categories>
      <tags>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>vim</title>
    <url>/2021/01/19/utils/vim/</url>
    <content><![CDATA[<p>在命令模式下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">e 跳到单词的末尾</span><br><span class="line">w 跳到单词的首位</span><br><span class="line">r + [想要替换成的字符]  比如hello 光标在h上，ra 就是把h替换成了a，也就是allo</span><br><span class="line">gg 跳到第一行首位</span><br><span class="line">G 跳到最后一行</span><br><span class="line">o 在光标的下面新开一行</span><br><span class="line">O 在光标的上面新开一行</span><br><span class="line">. 执行上次的操作</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在normal模式下</span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line">输入 /hello 按下回车 按 n 去到下一个hello的位置</span><br></pre></td></tr></table></figure>
<p>替换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在normal模式下</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">hello world</span><br><span class="line">hello</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">光标所在行替换</span><br><span class="line">  替换单个</span><br><span class="line">  键入 </span><br><span class="line">  :s/hello/hi</span><br><span class="line">  替换全部</span><br><span class="line">  键入 </span><br><span class="line">  :s/hello/hi/g</span><br><span class="line">全文替换</span><br><span class="line">键入</span><br><span class="line">:%s/o/i/g</span><br></pre></td></tr></table></figure>
<p>复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">复制当前行 yy</span><br></pre></td></tr></table></figure>
<p>粘贴</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p</span><br></pre></td></tr></table></figure>
<p>删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除当前行 dd</span><br><span class="line">删除光标选中字符 x</span><br><span class="line">2dd 删除从光标（包括光标所在行）往下2行</span><br></pre></td></tr></table></figure>
<p>撤销</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">u</span><br></pre></td></tr></table></figure>
<p>反撤销</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl r</span><br></pre></td></tr></table></figure>
<p>生成多个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在normal模式下按下100，进入输入模式 输入hello 然后esc</span><br></pre></td></tr></table></figure>
<p>visual</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v 选中</span><br><span class="line">v0 选中到行首</span><br><span class="line">ctrl + v 进入 到block 然后ctrl + d 选中到最后一行 然后想要对选中的行做操作 按下 I，输入 # 进行注释，然后再按下esc</span><br></pre></td></tr></table></figure>
<p>help</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">help 0</span><br><span class="line">help test.txt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>helper</tag>
      </tags>
  </entry>
  <entry>
    <title>vue单元测试</title>
    <url>/2021/01/16/vue/vue-unit-test/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、安装依赖模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @vue/<span class="built_in">test</span>-utils vue-jest -D</span><br></pre></td></tr></table></figure>
<p>2、创建jest配置文件</p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>unit-test</tag>
      </tags>
  </entry>
  <entry>
    <title>架构</title>
    <url>/2020/01/01/vue/framework/</url>
    <content><![CDATA[<h4 id="Vue组件化"><a href="#Vue组件化" class="headerlink" title="Vue组件化"></a>Vue组件化</h4><h5 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h5><p>插槽语法是Vue实现的内容分发API，用于复合组件开发。该技术在通用组件库开发中有大量应用。</p>
<h6 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// child</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// parent</span><br><span class="line">&lt;child&gt;Hello World&lt;/child&gt;</span><br></pre></td></tr></table></figure>
<h6 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h6><p>将内容过分发到子组件指定位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// child</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;solt&gt;&lt;/solt&gt;</span><br><span class="line">  &lt;solt name=&quot;content&quot;&gt;&lt;/solt&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// parent</span><br><span class="line">&lt;Child&gt;</span><br><span class="line">	&lt;template v-solt:default&gt;具名插槽&lt;/template&gt;</span><br><span class="line">  &lt;template v-solt:content&gt;hello world&lt;/template&gt;</span><br><span class="line">&lt;/Child&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h6 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h6><p>分发内容要用到子组件中的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// child</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;slot :foo=&quot;foo&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//parent</span><br><span class="line">&lt;child&gt;</span><br><span class="line">	&lt;template v-slot:default=&quot;slotProps&quot;&gt;来自子组件的数据&#123;&#123; slotProps.foo &#125;&#125;&lt;/template&gt;</span><br><span class="line">&lt;/child&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>transfer-css</title>
    <url>/2022/04/08/webpack/transfer-css/</url>
    <content><![CDATA[<h1 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h1>]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-Extend总结</title>
    <url>/2020/01/02/vue/vue-extend/</url>
    <content><![CDATA[<h4 id="一、Vue-extend"><a href="#一、Vue-extend" class="headerlink" title="一、Vue-extend"></a>一、Vue-extend</h4><p>Vue.extend(options)在官法文章中的归类是全局API，是使用基础Vue构造器，创造一个子类，动态地创建实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Init = Vue.extend(&#123;</span><br><span class="line">	template: <span class="string">'&lt;div&gt;Hello World&lt;/div&gt;'</span>,</span><br><span class="line">	data()&#123;</span><br><span class="line">		<span class="keyword">return</span> &#123;</span><br><span class="line">			msg:<span class="string">'Hello'</span></span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// render: h =&gt; h(Component)</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Init().$mount(<span class="string">'app'</span>)</span><br></pre></td></tr></table></figure>
<h4 id="二、Vue-component"><a href="#二、Vue-component" class="headerlink" title="二、Vue.component()"></a>二、Vue.component()</h4><p>注册或者获取全局组件，注册还会自动使用给定的id设置组件的名称</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册组件时，传入一个构造器</span></span><br><span class="line">Vue.component(<span class="string">'hs-form'</span>,Vue.extend(...))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册组件时，传入一个选项对象</span></span><br><span class="line">Vue.component(<span class="string">'hs-form'</span>,&#123;</span><br><span class="line">	data()&#123;</span><br><span class="line">		<span class="keyword">return</span>&#123;</span><br><span class="line">			name: <span class="string">'Hello'</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取注册的组件（始终返回构造器）</span></span><br><span class="line"><span class="keyword">var</span> hsFormConstructor = Vue.component(<span class="string">'hs-form'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack构建vue项目</title>
    <url>/2021/01/15/webpack/webpack%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><h4 id="1、安装webpack依赖"><a href="#1、安装webpack依赖" class="headerlink" title="1、安装webpack依赖"></a>1、安装webpack依赖</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add webpack webpack-cli -D</span><br><span class="line">yarn add webpack-dev-server -D</span><br><span class="line">yarn add html-webpack-plugin -D</span><br></pre></td></tr></table></figure>
<h4 id="2、安装babel依赖"><a href="#2、安装babel依赖" class="headerlink" title="2、安装babel依赖"></a>2、安装babel依赖</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add babel-loader @babel/core -D</span><br><span class="line"><span class="comment"># 为了转化es6代码，需要安装babel插件</span></span><br><span class="line">yarn add @babel/preset-env @babel/polyfill -D</span><br><span class="line"><span class="comment"># 安装防止全局污染babel插件</span></span><br><span class="line">yarn add -D @babel/plugin-transform-runtime</span><br><span class="line">yarn add @babel/runtime @babel/runtime-corejs2</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="3、创建-babelrc文件"><a href="#3、创建-babelrc文件" class="headerlink" title="3、创建.babelrc文件"></a>3、创建.babelrc文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"@babel/preset-env"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/plugin-transform-runtime"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"corejs"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"helpers"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"regenerator"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"useESModules"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、安装自动化辅助"><a href="#4、安装自动化辅助" class="headerlink" title="4、安装自动化辅助"></a>4、安装自动化辅助</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add copy-webpack-plugin -D</span><br><span class="line">yarn add clean-webpack-plugin -D</span><br><span class="line">yarn add html-webpack-plugin -D</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> plugins: [</span><br><span class="line">  <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">"index.html"</span>,</span><br><span class="line">    template: resolve(<span class="string">"../examples/public/index.html"</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">  <span class="keyword">new</span> copyWebpackPlugin(&#123;</span><br><span class="line">    patterns: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">from</span>: resolve(<span class="string">"../examples/public"</span>),</span><br><span class="line">        to: resolve(<span class="string">"../dist"</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<h4 id="5、解析css"><a href="#5、解析css" class="headerlink" title="5、解析css"></a>5、解析css</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add style-loader css-loader -D</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">  rules:[&#123;</span><br><span class="line">    test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">    use:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6、安装预编器sass"><a href="#6、安装预编器sass" class="headerlink" title="6、安装预编器sass"></a>6、安装预编器sass</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add sass-loader sass -D</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="string">'style-loader'</span></span><br><span class="line">    <span class="string">'css-loader'</span>,</span><br><span class="line">    <span class="string">'sass-loader'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="7、抽取css"><a href="#7、抽取css" class="headerlink" title="7、抽取css"></a>7、抽取css</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">  rules:[</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        miniCssExtractPlugin.loader,</span><br><span class="line">        <span class="string">"css-loader"</span>,</span><br><span class="line">        <span class="string">"sass-loader"</span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">plugins:[</span><br><span class="line">  <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">"css/[name].[hash:8].css"</span>,</span><br><span class="line">    chunkFilename: <span class="string">"css/[id].css"</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="8、兼容css"><a href="#8、兼容css" class="headerlink" title="8、兼容css"></a>8、兼容css</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add postcss postcss-loader postcss-preset-env -D</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    <span class="string">"css-loader"</span>,</span><br><span class="line">    <span class="string">"sass-loader"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        postcssOptions: &#123;</span><br><span class="line">          plugins: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">"postcss-preset-env"</span>,</span><br><span class="line">              &#123; <span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>, <span class="string">'ie 8'</span>, <span class="string">'&gt;1%'</span>] &#125;</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="9、识别vue文件"><a href="#9、识别vue文件" class="headerlink" title="9、识别vue文件"></a>9、识别vue文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vue-loader vue-template-compiler vue-style-loader -D</span><br><span class="line">yarn add vue -S</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rules:[</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">    use: [<span class="string">"vue-loader"</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br><span class="line">resolve:&#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    vue$: <span class="string">"vue/dist/vue.runtime.esm.js"</span>,</span><br><span class="line">    <span class="string">"@"</span>: resolve(<span class="string">"../src"</span>),</span><br><span class="line">    <span class="string">"@examples"</span>: resolve(<span class="string">"../examples"</span>),</span><br><span class="line">  &#125;,</span><br><span class="line"> 	extensions: [<span class="string">".js"</span>, <span class="string">".vue"</span>],</span><br><span class="line">&#125;,</span><br><span class="line">plugins:[</span><br><span class="line">  <span class="keyword">new</span> vueLoaderPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="配置eslint"><a href="#配置eslint" class="headerlink" title="配置eslint"></a>配置eslint</h3><p>eslant-loader 可以每次保存的时候校验代码</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
</search>
